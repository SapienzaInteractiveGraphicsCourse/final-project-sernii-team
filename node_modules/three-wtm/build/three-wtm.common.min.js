"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three");class t{static addMaterial(e,t,s,r,i){let a;t.name=s,r?(e[s]=t,i&&console.info('Material with name "'+s+'" was forcefully overridden.')):(a=e[s],a?a.uuid!=a.uuid&&i&&console.log('Same material name "'+a.name+'" different uuid ['+a.uuid+"|"+t.uuid+"]"):(e[s]=t,i&&console.info('Material with name "'+s+'" was added.')))}static getMaterialsJSON(e){const t={};let s;for(const r in e)s=e[r],"function"==typeof s.toJSON&&(t[r]=s.toJSON());return t}static cloneMaterial(e,s,r){let i;if(s){let a=s.materialNameOrg;a=null!=a?a:"";const n=e[a];n?(i=n.clone(),Object.assign(i,s.materialProperties),t.addMaterial(e,i,s.materialProperties.name,!0)):r&&console.info('Requested material "'+a+'" is not available!')}return i}}class s{static buildThreeConst(){return"const EventDispatcher = THREE.EventDispatcher;\nconst BufferGeometry = THREE.BufferGeometry;\nconst BufferAttribute = THREE.BufferAttribute;\nconst Box3 = THREE.Box3;\nconst Sphere = THREE.Sphere;\nconst Texture = THREE.Texture;\nconst MaterialLoader = THREE.MaterialLoader;\n"}static buildUglifiedThreeMapping(){return s.buildUglifiedNameAssignment((function(){return e.BufferGeometry}),"BufferGeometry",/_BufferGeometry/,!1)+s.buildUglifiedNameAssignment((function(){return e.BufferAttribute}),"BufferAttribute",/_BufferAttribute/,!1)+s.buildUglifiedNameAssignment((function(){return e.Box3}),"Box3",/_Box3/,!1)+s.buildUglifiedNameAssignment((function(){return e.Sphere}),"Sphere",/_Sphere/,!1)+s.buildUglifiedNameAssignment((function(){return e.Texture}),"Texture",/_Texture/,!1)+s.buildUglifiedNameAssignment((function(){return e.MaterialLoader}),"MaterialLoader",/_MaterialLoader/,!1)}static buildUglifiedThreeWtmMapping(){return s.buildUglifiedNameAssignment((function(){return r}),"DataTransport",/_DataTransport/,!0)+s.buildUglifiedNameAssignment((function(){return a}),"GeometryTransport",/_GeometryTransport/,!0)+s.buildUglifiedNameAssignment((function(){return n}),"MeshTransport",/_MeshTransport/,!0)+s.buildUglifiedNameAssignment((function(){return i}),"MaterialsTransport",/_MaterialsTransport/,!0)+s.buildUglifiedNameAssignment((function(){return t}),"MaterialUtils",/_MaterialUtils/,!0)}static buildUglifiedNameAssignment(e,t,s,r){let i=e.toString();i=i.replace(s,"").replace(/[\r\n]+/gm,""),i=i.replace(/.*return/,"").replace(/\}/,"").replace(/;/gm,"");const a=i.trim();let n="";if(a!==t){n="const "+(r?t:a)+" = "+(r?a:t)+";\n"}return n}}class r{constructor(e,t){this.main={cmd:void 0!==e?e:"unknown",id:void 0!==t?t:0,type:"DataTransport",progress:0,buffers:{},params:{}},this.transferables=[]}loadData(e){return this.main.cmd=e.cmd,this.main.id=e.id,this.main.type="DataTransport",this.setProgress(e.progress),this.setParams(e.params),e.buffers&&Object.entries(e.buffers).forEach((([e,t])=>{this.main.buffers[e]=t})),this}getCmd(){return this.main.cmd}getId(){return this.main.id}setParams(e){return null!=e&&(this.main.params=e),this}getParams(){return this.main.params}setProgress(e){return this.main.progress=e,this}addBuffer(e,t){return this.main.buffers[e]=t,this}getBuffer(e){return this.main.buffers[e]}package(e){for(let t of Object.values(this.main.buffers))if(null!=t){const s=e?t.slice(0):t;this.transferables.push(s)}return this}getMain(){return this.main}getTransferables(){return this.transferables}postMessage(e){return e.postMessage(this.main,this.transferables),this}}class i extends r{constructor(e,t){super(e,t),this.main.type="MaterialsTransport",this.main.materials={},this.main.multiMaterialNames={},this.main.cloneInstructions=[]}loadData(t){super.loadData(t),this.main.type="MaterialsTransport",Object.assign(this.main,t);const s=new e.MaterialLoader;return Object.entries(this.main.materials).forEach((([e,t])=>{this.main.materials[e]=s.parse(t)})),this}_cleanMaterial(t){return Object.entries(t).forEach((([s,r])=>{(r instanceof e.Texture||null===r)&&(t[s]=void 0)})),t}addBuffer(e,t){return super.addBuffer(e,t),this}setParams(e){return super.setParams(e),this}setMaterials(e){return null!=e&&Object.keys(e).length>0&&(this.main.materials=e),this}getMaterials(){return this.main.materials}cleanMaterials(){let e,t={};for(let s of Object.values(this.main.materials))"function"==typeof s.clone&&(e=s.clone(),t[e.name]=this._cleanMaterial(e));return this.setMaterials(t),this}package(e){return super.package(e),this.main.materials=t.getMaterialsJSON(this.main.materials),this}hasMultiMaterial(){return Object.keys(this.main.multiMaterialNames).length>0}getSingleMaterial(){return Object.keys(this.main.materials).length>0?Object.entries(this.main.materials)[0][1]:null}processMaterialTransport(e,s){for(let r=0;r<this.main.cloneInstructions.length;r++)t.cloneMaterial(e,this.main.cloneInstructions[r],s);let r;if(this.hasMultiMaterial())r=[],Object.entries(this.main.multiMaterialNames).forEach((([t,s])=>{r[t]=e[s]}));else{const t=this.getSingleMaterial();null!==t&&(r=e[t.name],r||(r=t))}return r}}class a extends r{constructor(e,t){super(e,t),this.main.type="GeometryTransport",this.main.geometryType=0,this.main.geometry={},this.main.bufferGeometry=null}loadData(e){return super.loadData(e),this.main.type="GeometryTransport",this.setGeometry(e.geometry,e.geometryType)}getGeometryType(){return this.main.geometryType}setParams(e){return super.setParams(e),this}setGeometry(t,s){return this.main.geometry=t,this.main.geometryType=s,t instanceof e.BufferGeometry&&(this.main.bufferGeometry=t),this}package(e){super.package(e);const t=this.main.geometry.getAttribute("position"),s=this.main.geometry.getAttribute("normal"),r=this.main.geometry.getAttribute("uv"),i=this.main.geometry.getAttribute("color"),a=this.main.geometry.getAttribute("skinIndex"),n=this.main.geometry.getAttribute("skinWeight"),o=this.main.geometry.getIndex();return this._addBufferAttributeToTransferable(t,e),this._addBufferAttributeToTransferable(s,e),this._addBufferAttributeToTransferable(r,e),this._addBufferAttributeToTransferable(i,e),this._addBufferAttributeToTransferable(a,e),this._addBufferAttributeToTransferable(n,e),this._addBufferAttributeToTransferable(o,e),this}reconstruct(t){if(this.main.bufferGeometry instanceof e.BufferGeometry)return this;this.main.bufferGeometry=new e.BufferGeometry;const s=this.main.geometry;this._assignAttribute(s.attributes.position,"position",t),this._assignAttribute(s.attributes.normal,"normal",t),this._assignAttribute(s.attributes.uv,"uv",t),this._assignAttribute(s.attributes.color,"color",t),this._assignAttribute(s.attributes.skinIndex,"skinIndex",t),this._assignAttribute(s.attributes.skinWeight,"skinWeight",t);const r=s.index;if(null!=r){const s=t?r.array.slice(0):r.array;this.main.bufferGeometry.setIndex(new e.BufferAttribute(s,r.itemSize,r.normalized))}const i=s.boundingBox;null!==i&&(this.main.bufferGeometry.boundingBox=Object.assign(new e.Box3,i));const a=s.boundingSphere;return null!==a&&(this.main.bufferGeometry.boundingSphere=Object.assign(new e.Sphere,a)),this.main.bufferGeometry.uuid=s.uuid,this.main.bufferGeometry.name=s.name,this.main.bufferGeometry.type=s.type,this.main.bufferGeometry.groups=s.groups,this.main.bufferGeometry.drawRange=s.drawRange,this.main.bufferGeometry.userData=s.userData,this}getBufferGeometry(){return this.main.bufferGeometry}_addBufferAttributeToTransferable(e,t){if(null!=e){const s=t?e.array.slice(0):e.array;this.transferables.push(s.buffer)}return this}_assignAttribute(t,s,r){if(t){const i=r?t.array.slice(0):t.array;this.main.bufferGeometry.setAttribute(s,new e.BufferAttribute(i,t.itemSize,t.normalized))}return this}}class n extends a{constructor(e,t){super(e,t),this.main.type="MeshTransport",this.main.materialsTransport=new i}loadData(e){return super.loadData(e),this.main.type="MeshTransport",this.main.meshName=e.meshName,this.main.materialsTransport=(new i).loadData(e.materialsTransport.main),this}setParams(e){return super.setParams(e),this}setMaterialsTransport(e){return e instanceof i&&(this.main.materialsTransport=e),this}getMaterialsTransport(){return this.main.materialsTransport}setMesh(e,t){return this.main.meshName=e.name,super.setGeometry(e.geometry,t),this}package(e){return super.package(e),null!==this.main.materialsTransport&&this.main.materialsTransport.package(e),this}reconstruct(e){return super.reconstruct(e),this}}class o{static comRouting(e,t,s,r,i){let a=t.data;"init"===a.cmd?null!=s?s[r](e,a.workerId,a.config):r(e,a.workerId,a.config):"execute"===a.cmd&&(null!=s?s[i](e,a.workerId,a.config):i(e,a.workerId,a.config))}}class l{constructor(e,t,s,r){this.taskType=e,this.fallback=s,this.verbose=!0===r,this.initialised=!1,this.functions={init:null,execute:null,comRouting:null,dependencies:{descriptions:[],code:[]},workerModuleUrl:null},this.workers={code:[],instances:new Array(t),available:[]},this.status={initStarted:!1,initComplete:!1}}getTaskType(){return this.taskType}setFunctions(e,t,s){this.functions.init=e,this.functions.execute=t,this.functions.comRouting=s,void 0!==this.functions.comRouting&&null!==this.functions.comRouting||(this.functions.comRouting=o.comRouting),this._addWorkerCode("init",this.functions.init.toString()),this._addWorkerCode("execute",this.functions.execute.toString()),this._addWorkerCode("comRouting",this.functions.comRouting.toString()),this.workers.code.push('self.addEventListener( "message", message => comRouting( self, message, null, init, execute ), false );')}_addWorkerCode(e,t){t.startsWith("function")?this.workers.code.push("const "+e+" = "+t+";\n\n"):this.workers.code.push("function "+t+";\n\n")}setDependencyDescriptions(e){e&&e.forEach((e=>{this.functions.dependencies.descriptions.push(e)}))}setWorkerModule(e){this.functions.workerModuleUrl=new URL(e,window.location.href)}isWorkerModule(){return null!==this.functions.workerModuleUrl}async loadDependencies(){let t=[],s=new e.FileLoader;s.setResponseType("arraybuffer");for(let e of this.functions.dependencies.descriptions){if(e.url){let r=new URL(e.url,window.location.href);t.push(s.loadAsync(r.href,(e=>{this.verbose&&console.log(e)})))}e.code&&t.push(new Promise((t=>t(e.code))))}this.verbose&&console.log("Task: "+this.getTaskType()+": Waiting for completion of loading of all dependencies."),this.functions.dependencies.code=await Promise.all(t)}async createWorkers(){let e;if(this.fallback)for(let t=0;t<this.workers.instances.length;t++)e=new h(t,this.functions.init,this.functions.execute),this.workers.instances[t]=e;else{let t=new Blob(this.functions.dependencies.code.concat(this.workers.code),{type:"application/javascript"}),s=window.URL.createObjectURL(t);for(let t=0;t<this.workers.instances.length;t++)e=new c(t,s),this.workers.instances[t]=e}}async createWorkerModules(){for(let e,t=0;t<this.workers.instances.length;t++)e=new c(t,this.functions.workerModuleUrl.href,{type:"module"}),this.workers.instances[t]=e}async initWorkers(e,t){let s=[];for(let r of this.workers.instances){let i=new Promise(((s,i)=>{let a;if(r.onmessage=e=>{this.verbose&&console.log("Init Complete: "+e.data.id),s(e)},r.onerror=i,t){a=[];for(let e=0;e<t.length;e++)a.push(t[e].slice(0))}r.postMessage({cmd:"init",workerId:r.getId(),config:e},a)}));s.push(i)}this.verbose&&console.log("Task: "+this.getTaskType()+": Waiting for completion of initialization of all workers."),await Promise.all(s),this.workers.available=this.workers.instances}getAvailableTask(){let e;return this.hasTask()&&(e=this.workers.available.shift()),e}hasTask(){return this.workers.available.length>0}returnAvailableTask(e){this.workers.available.push(e)}dispose(){for(let e of this.workers.instances)e.terminate()}}class u{constructor(e,t,s,r,i,a){this.taskType=e,this.config=t,this.assetAvailableFunction=s,this.resolve=r,this.reject=i,this.transferables=a}}class c extends Worker{constructor(e,t,s){super(t,s),this.id=e}getId(){return this.id}}class h{constructor(e,t,s){this.id=e,this.functions={init:t,execute:s}}getId(){return this.id}postMessage(e,t){let s=this,r={postMessage:function(e){s.onmessage({data:e})}};o.comRouting(r,{data:e},null,s.functions.init,s.functions.execute)}terminate(){}}exports.DataTransport=r,exports.DeUglify=s,exports.GeometryTransport=a,exports.MaterialStore=class{constructor(t){if(this.materials={},t){const t=new e.MeshStandardMaterial({color:14479871});t.name="defaultMaterial";const s=new e.MeshStandardMaterial({color:14479871});s.name="defaultVertexColorMaterial",s.vertexColors=e.VertexColors;const r=new e.LineBasicMaterial;r.name="defaultLineMaterial";const i=new e.PointsMaterial({size:.1});i.name="defaultPointMaterial",this.materials[t.name]=t,this.materials[s.name]=s,this.materials[r.name]=r,this.materials[i.name]=i}}addMaterials(e,s){if(null==e&&(e={}),Object.keys(e).length>0){let r;for(const i in e)r=e[i],t.addMaterial(this.materials,r,i,!0===s)}}getMaterials(){return this.materials}getMaterial(e){return this.materials[e]}clearMaterials(){this.materials={}}},exports.MaterialUtils=t,exports.MaterialsTransport=i,exports.MeshTransport=n,exports.ObjectManipulator=class{static applyProperties(e,t,s){if(null==e||null==t)return;let r,i,a;for(r in t)i="set"+r.substring(0,1).toLocaleUpperCase()+r.substring(1),a=t[r],"function"==typeof e[i]?e[i](a):(e.hasOwnProperty(r)||s)&&(e[r]=a)}},exports.ObjectUtils=class{static serializePrototype(e,t,s,r){let i,a=[],n="";r?(n=e.toString()+"\n\n",i=t):i=e;for(let e in i){let t=i[e],s=t.toString();"function"==typeof t&&a.push("\t"+e+": "+s+",\n\n")}n+=s+(r?".prototype":"")+" = {\n\n";for(let e=0;e<a.length;e++)n+=a[e];return n+="\n}\n;",n}static serializeClass(e){return e.toString()+"\n\n"}},exports.WorkerTaskManager=class{constructor(e){this.taskTypes=new Map,this.verbose=!1,this.maxParallelExecutions=e||4,this.actualExecutionCount=0,this.storedExecutions=[],this.teardown=!1}setVerbose(e){return this.verbose=e,this}setMaxParallelExecutions(e){return this.maxParallelExecutions=e,this}getMaxParallelExecutions(){return this.maxParallelExecutions}supportsTaskType(e){return this.taskTypes.has(e)}registerTaskType(e,t,s,r,i,a){let n=!this.supportsTaskType(e);if(n){let n=new l(e,this.maxParallelExecutions,i,this.verbose);n.setFunctions(t,s,r),n.setDependencyDescriptions(a),this.taskTypes.set(e,n)}return n}registerTaskTypeModule(e,t){let s=!this.supportsTaskType(e);if(s){let s=new l(e,this.maxParallelExecutions,!1,this.verbose);s.setWorkerModule(t),this.taskTypes.set(e,s)}return s}async initTaskType(e,t,s){let r=this.taskTypes.get(e);if(r)if(r.status.initStarted)for(;!r.status.initComplete;)await this._wait(10);else r.status.initStarted=!0,r.isWorkerModule()?await r.createWorkerModules().then((()=>r.initWorkers(t,s))).then((()=>r.status.initComplete=!0)).catch((e=>console.error(e))):await r.loadDependencies().then((()=>r.createWorkers())).then((()=>r.initWorkers(t,s))).then((()=>r.status.initComplete=!0)).catch((e=>console.error(e)))}async _wait(e){return new Promise((t=>{setTimeout(t,e)}))}async enqueueForExecution(e,t,s,r){return new Promise(((i,a)=>{this.storedExecutions.push(new u(e,t,s,i,a,r)),this._depleteExecutions()}))}_depleteExecutions(){let e=0;for(;this.actualExecutionCount<this.maxParallelExecutions&&e<this.storedExecutions.length;){let t=this.storedExecutions[e],s=this.taskTypes.get(t.taskType),r=s.getAvailableTask();if(r){this.storedExecutions.splice(e,1),this.actualExecutionCount++,new Promise(((e,s)=>{r.onmessage=s=>{"assetAvailable"===s.data.cmd?t.assetAvailableFunction instanceof Function&&t.assetAvailableFunction(s.data):e(s)},r.onerror=s,r.postMessage({cmd:"execute",workerId:r.getId(),config:t.config},t.transferables)})).then((e=>{s.returnAvailableTask(r),t.resolve(e.data),this.actualExecutionCount--,this._depleteExecutions()})).catch((e=>{t.reject("Execution error: "+e)}))}else e++}}dispose(){this.teardown=!0;for(let e of this.taskTypes.values())e.dispose();return this}},exports.WorkerTaskManagerDefaultRouting=o;
